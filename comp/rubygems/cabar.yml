<%
  # Calls ruby to get information about rubygems.
  rubygems_info = {
    :version => `gem environment version 2>/dev/null`.chomp,
    :GEM_PATH => `unset GEM_PATH; unset GEM_HOME; gem environment path 2>/dev/null`.chomp.split(Cabar.path_sep),
  }
  rubygems_info = nil if rubygems_info[:version].empty?

  case rubygems_info
  when Hash
    rubygems_info[:installed] = true
  else 
    rubygems_info = { :installed => false }
  end
  # Jer: WHAT IS THIS WORKING-AROUND? -- kurt 2009/06/15
  # This entire mechanisim for introspecting on rubygems is flawed, it happens too early in
  # in the component resolution. -- Jer
  # How about breaking the plugin up into 2 pieces:  
  # 1 for the rubygems ENV var,
  # and 1 for the interface to the gem path.  
  # We can have 1 plugin depend on the other, and verify the either
  # the system or the rubygems lib contains a rubygem implementation
  # before we realize the gem facet
  rubygems_info[:installed] = true
 %>
cabar:
  version: '1.0'
  enabled: <%= rubygems_info[:installed].inspect %>

  component:
    name: rubygems
    version: v<%= rubygems_info[:version] || '0.1' %>
    description: "Rubygems - Cabar support facets"
    standard_gem_path: <%= rubygems_info[:GEM_PATH].inspect %>

  plugin: 'cabar.rb'

  requires:
    component:
      ruby: true
      cabar: true

